MCP Server Development Learnings
================================

1. STDOUT is Reserved for JSON-RPC Communication
   - MCP servers communicate with clients using JSON-RPC protocol over stdin/stdout
   - Any print() statements to stdout will corrupt the communication stream
   - This causes JSON parsing errors on the client side: "Unexpected token 'a', \"transcript_l\"... is not valid JSON"

2. Logging Best Practices for MCP Servers
   - Option 1: Print to stderr (simple debugging)
     print("Debug message", file=sys.stderr)
   
   - Option 2: Use Python's logging module (recommended)
     import logging
     logging.basicConfig(level=logging.DEBUG, stream=sys.stderr)
     logger = logging.getLogger(__name__)
     logger.debug("Debug message")
   
   - Option 3: Write to a log file
     with open("debug.log", "a") as f:
         f.write("Debug message\n")

3. Server Initialization and Decorators
   - MCP server decorators (@server.list_tools(), @server.call_tool()) require the server instance to exist at module level
   - Decorators execute during module import, before main() runs
   - Execution order:
     1. Python imports the module
     2. Creates server instance at module level
     3. Decorators run and register functions with the server
     4. main() is called
     5. Server starts handling requests
   - This is similar to Flask, FastAPI, and other Python frameworks

4. Debugging Server Crashes
   - Server crashes during initialization often show: "Server transport closed unexpectedly"
   - Add debug prints to stderr to identify crash location
   - Common causes:
     - Missing imports (e.g., time, logging)
     - Undefined variables
     - Initialization errors in global scope
     - Dependencies not installed

5. Error Handling Best Practices
   - Always handle exceptions in tool implementations
   - Return error messages as TextContent rather than raising exceptions
   - Use try/except blocks around external API calls (like YouTubeTranscriptApi)
   - Check for undefined variables before use (e.g., full_transcript)

6. File I/O During Module Import
   - Avoid file system operations during module import (global scope)
   - Operations like mkdir() or file writes during import can cause server crashes
   - Solution: Use lazy initialization
     ```python
     # Bad: Immediate initialization
     cache = TranscriptionCache(cache_dir=".youtube_cache")  # Creates dir on import
     
     # Good: Lazy initialization
     cache = None
     def get_cache():
         global cache
         if cache is None:
             cache = TranscriptionCache(cache_dir=".youtube_cache")
         return cache
     ```

7. Cache Directory Permissions
   - MCP servers may run with different working directories or permissions
   - Relative paths like ".youtube_cache" may fail due to read-only directories
   - Solution: Use user's home directory for cache
     ```python
     cache_dir = Path.home() / ".youtube_mcp_cache"
     ```

8. YouTube API Rate Limiting and Failures
   - YouTube may rate limit or block requests, causing "no element found" XML parsing errors
   - Common causes:
     - Too many requests in short time (rate limiting)
     - IP flagged for bot-like behavior (CAPTCHA)
     - Video has no captions available
     - Video is private or region-locked
   - Solutions:
     - Add random delays between requests (0.5-1.5 seconds)
     - Implement retry logic with longer waits for rate limiting
     - Try multiple language transcripts as fallback
     - Cache successful responses to reduce API calls

9. External API Error Handling
   - External APIs can fail unexpectedly even if they worked earlier
   - Always provide clear error messages explaining possible causes
   - Implement graceful degradation and fallback strategies
   - Log detailed errors to stderr for debugging while returning user-friendly messages

10. Key Rules
    - NEVER write directly to stdout in an MCP server
    - stdout is exclusively for JSON-RPC message exchange
    - Use stderr for ALL debugging output
    - Initialize server at module level when using decorators
    - Avoid file I/O during module import - use lazy initialization
    - Use absolute paths in user's home directory for persistent storage
    - Always add delays and retry logic when calling external APIs